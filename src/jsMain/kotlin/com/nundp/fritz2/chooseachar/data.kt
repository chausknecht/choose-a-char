package com.nundp.fritz2.chooseachar

val races = setOf(
    "Elf",
    "Fairy",
    "Orc",
    "Goblin",
    "Ghost",
    "Giant",
    "Dwarf",
    "Hobbit",
    "Human",
    "Rat",
    "Wolf",
    "Spider",
    "Ameba",
    "Troll",
    "Dragon",
    "Daemon",
    "Triton",
    "Mage",
    "Quacksalver",
    "Minstrel",
    "Evocator",
    "Developer",
    "Dust",
    "Thing",
    "Imagination"
)

val regions = setOf(
    "Mountain",
    "Swamp",
    "Forest",
    "Meadow",
    "Sea",
    "Seaside",
    "Desert",
    "Town",
    "Wilderness",
    "Dungeon",
    "Cave",
    "Volcano",
    "Island",
    "Ice",
    "Snow",
    "Fire",
    "Spherical",
    "Castle",
    "Road",
    "Hipster",
    "Village"
)

val raceProperties = setOf(
    "wealthy",
    "poor",
    "mining",
    "fishing",
    "small",
    "big",
    "giant",
    "angry",
    "sweet",
    "ugly",
    "plundering",
    "manic",
    "magical",
    "mysterious",
    "harvesting",
    "dancing",
    "singing",
    "socialising",
    "hunting",
    "drinking",
    "eating",
    "philosophic",
    "mad",
    "intelligent",
    "dumb",
    "smart",
    "smoking",
    "thinking",
    "writing",
    "joking",
    "special",
    "glorious",
    "prospering",
    "gorgeous",
    "cool",
    "striking",
    "exceptional",
    "good looking",
    "brave"
)

val items = setOf(
    "Sword",
    "Axe",
    "Potion",
    "Stab",
    "Bow",
    "Dagger",
    "Hat",
    "Armor",
    "Ring",
    "Cape",
    "Shoes",
    "Spell",
    "Herbage",
    "Spear",
    "Amulet",
    "Map",
    "Scroll",
    "Lamp",
    "Bag",
    "Claws",
    "Shield",
    "Poison",
    "Hammer",
    "Drink",
    "Code Editor",
    "Diamond",
    "Perls",
    "Horse",
    "Device",
    "Glasses",
    "Drums",
    "Pipe",
    "Beard",
    "Source Code",
    "Algorithm",
    "Language",
    "Joke",
    "Game",
    "App",
    "Shitstorm",
    "Tweet",
    "Force",
    "Cocktail",
    "Drink",
    "Cake",
    "Exception"
)

val effects = setOf(
    "Magic",
    "Healing",
    "Power",
    "Death",
    "Might",
    "Awesomeness",
    "Winning",
    "Living",
    "Dancing",
    "Poisoning",
    "Singing",
    "Beaming",
    "Destruction",
    "Programming",
    "Victory",
    "Defeat",
    "Flames",
    "Light",
    "Darkness",
    "Vision",
    "Silence",
    "Music",
    "Intelligence",
    "Complexity",
    "Madness",
    "Betrayal",
    "Explosion",
    "Joking",
    "Strongness",
    "Weakness",
    "Peace",
    "Panic",
    "Freedom",
    "Dictatorship",
    "Recursion",
    "Rage",
    "Doom"
)

val itemPropertiesSecond = setOf(
    "small",
    "giant",
    "big",
    "ultimate",
    "awesome",
    "ridiculous",
    "magical",
    "healing",
    "powerful",
    "mighty",
    "singing",
    "blinding",
    "sparkling",
    "dark",
    "fiery",
    "tasty",
    "volcanic",
    "smelly",
    "super",
    "dreadful",
    "broken",
    "poisoned",
    "poisoning",
    "flaming",
    "drunken",
    "old",
    "young",
    "unknown",
    "functional",
    "golden",
    "wooden",
    "stony",
    "wild",
    "loud",
    "silent",
    "intelligent",
    "dumb",
    "smart",
    "exploding",
    "red",
    "green",
    "blue",
    "colorful",
    "black",
    "white",
    "strong",
    "weak",
    "politcal",
    "iron",
    "plastic",
    "cool",
    "gorgeous",
    "recursive",
    "striking",
    "shuttering",
    "shiny",
    "blinking",
    "spicy"
)

val itemPropertiesFirst = setOf(
    "another",
    "the one",
    "the final",
    "censored",
    "extra"
) + itemPropertiesSecond

val doubleModifiers = setOf(
    "extremely",
    "very",
    "unbelievable",
    "double",
    "massively"
)

fun allNames() = generateComponents(raceProperties, raceProperties, regions, races)

fun allItems() = generateComponents(itemPropertiesFirst, itemPropertiesSecond, items, effects, " of")

fun generateComponents(
    firstProps: Set<String>,
    secondProps: Set<String>,
    firstNoun: Set<String>,
    secondNoun: Set<String>,
    fillWord: String = ""
) = generateSequence {
    var firstProp = firstProps.random()
    val secondProp = secondProps.random()
    if (firstProp == secondProp)
        firstProp = doubleModifiers.random()
    "${firstProp.capitalize()} $secondProp ${firstNoun.random()}$fillWord ${secondNoun.random()}"
}
